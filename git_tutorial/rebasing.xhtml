<?xml version="1.0" encoding="utf-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <title>Rebasing</title>
    <link type="text/css" rel="stylesheet" href="style.css"/>
    <link type="text/css" rel="stylesheet" href="pygments.css"/>
  </head>
  <body>
    <div id="page">
      <div id="content">

<h1 id="rebasing">Rebasing</h1>

<p>Let’s start this module by taking an in-depth look at our history.
The six commits asterisked below are part of the same train of thought. We even
developed them in their own feature branch. However, they show up interspersed
with commits from other branches, along with a superfluous merge commit
(<code>b9ae1bc</code>). In other words, our repository’s history is kind
of messy:</p>

<pre><code class="s">ec1b8cb</code> Merge branch &#39;crazy&#39;
<code class="s">*42fa173</code> Add news item for rainbow
<code class="s">3db88e1</code> Add 1st news item
<code class="s">*7147cc5</code> Link index.html to rainbow.html
<code class="s">*6aa4b3b</code> Add CSS stylesheet to rainbow.html
<code class="s">b9ae1bc</code> Merge branch &#39;master&#39; into crazy
<code class="s">ae4e756</code> Link HTML pages to stylesheet
<code class="s">98cd46d</code> Add CSS stylesheet
<code class="s">*33e25c9</code> Rename crazy.html to rainbow.html
<code class="s">*677e0e0</code> Add a rainbow to crazy.html
<code class="s">506bb9b</code> Revert &quot;Add a crazzzy experiment&quot;
<code class="s">*514fbe7</code> Add a crazzzy experiment
<code class="s">1c310d2</code> Add navigation links
<code class="s">54650a3</code> Create blue and orange pages
<code class="s">b650e4b</code> Create index page
</pre>


<p>Fortunately, Git includes a tool to help us clean up our commits: <code>git
rebase</code>. Rebasing lets us move branches around by changing the commit
that they are <em>based</em> on. Conceptually, this is what it allows us to
do:</p>

<figure>
    <img src="media/5-1.png"/>

    <figcaption>Rebasing a feature branch onto <code>master</code></figcaption>

</figure>

<p>After rebasing, the <code>feature</code> branch has a new parent commit,
which is the same commit pointed to by <code>master</code>. Instead of joining
the branches with a merge commit, rebasing integrates the <code>feature</code>
branch by building <em>on top of</em> <code>master</code>. The result is a
perfectly linear history that reads more like a story than the hodgepodge of
unrelated edits shown above.</p>

<p>To explore Git’s rebasing capabilities, we’ll need to build up
our example project so that we have something to work with. Then, we’ll
go back and rewrite history using <code>git rebase</code>.</p>

<div class="icon-text download-icon-text">
    <img src="media/icons/download.png" style="max-width: 45px"/>

    <p><a href="http://rypress.com/tutorials/git/media/repo-zips/rebasing.zip">Download the repository
    for this module</a></p>

</div>

<div style="clear: both"/>

<p>If you’ve been following along from the previous module, you already
have everything you need. Otherwise, download the zipped Git repository from
the above link, uncompress it, and you’re good to go.</p>


<h2 id="create-an-about-section">Create an About Section</h2>

<p>We’ll begin by creating an about page for the website. Remember, we
should be doing all of our work in isolated branches so that we don’t
cause any unintended changes to the stable version of the project.</p>

<pre><code class="k">git</code> <code class="k">branch</code> <code class="n">about</code>
<code class="k">git</code> <code class="k">checkout</code> <code class="n">about</code>
</pre>


<p>The next few steps break this feature into several unnecessarily small
commits so that we can see the effects of a rebase. First, make a new directory
in <code>my-git-repo</code> called <code>about</code>. Then, create the empty
file <code>about/index.html</code>.  Stage and commit a snapshot.</p>
    
<pre><code class="k">git</code> <code class="k">add</code> <code class="n">about</code>
<code class="k">git</code> <code class="k">status</code>
<code class="k">git</code> <code class="k">commit</code> <code class="na">-m</code> <code class="s">&quot;Add empty page in about section&quot;</code>
</pre>


<p>Note that <code>git add</code> can also add entire directories to the
staging area.</p>


<h2 id="add-an-about-page">Add an About Page</h2>

<p>Next, we’ll add some HTML to <code>about/index.html</code>:</p>

<pre><code class="cp">&lt;!DOCTYPE html&gt;</code>
<code class="nt">&lt;html</code> <code class="na">lang=</code><code class="s">&quot;en&quot;</code><code class="nt">&gt;</code>
<code class="nt">&lt;head&gt;</code>
  <code class="nt">&lt;title&gt;</code>About Us<code class="nt">&lt;/title&gt;</code>
  <code class="nt">&lt;link</code> <code class="na">rel=</code><code class="s">&quot;stylesheet&quot;</code> <code class="na">href=</code><code class="s">&quot;../style.css&quot;</code> <code class="nt">/&gt;</code>
  <code class="nt">&lt;meta</code> <code class="na">charset=</code><code class="s">&quot;utf-8&quot;</code> <code class="nt">/&gt;</code>
<code class="nt">&lt;/head&gt;</code>
<code class="nt">&lt;body&gt;</code>
  <code class="nt">&lt;h1&gt;</code>About Us<code class="nt">&lt;/h1&gt;</code>
  <code class="nt">&lt;p&gt;</code>We&#39;re a small, colorful website with just two employees:<code class="nt">&lt;/p&gt;</code>

  <code class="nt">&lt;ul&gt;</code>
    <code class="nt">&lt;li&gt;&lt;a</code> <code class="na">href=</code><code class="s">&quot;me.html&quot;</code><code class="nt">&gt;</code>Me: The Developer<code class="nt">&lt;/a&gt;&lt;/li&gt;</code>
    <code class="nt">&lt;li&gt;&lt;a</code> <code class="na">href=</code><code class="s">&quot;mary.html&quot;</code><code class="nt">&gt;</code>Mary: The Graphic Designer<code class="nt">&lt;/a&gt;&lt;/li&gt;</code>
  <code class="nt">&lt;/ul&gt;</code>
    
  <code class="nt">&lt;p&gt;&lt;a</code> <code class="na">href=</code><code class="s">&quot;../index.html&quot;</code><code class="nt">&gt;</code>Return to home page<code class="nt">&lt;/a&gt;&lt;/p&gt;</code>
<code class="nt">&lt;/body&gt;</code>
<code class="nt">&lt;/html&gt;</code>
</pre>

    
<p>Stage and commit the snapshot.</p>

<pre><code class="k">git</code> <code class="k">status</code>
<code class="k">git</code> <code class="k">commit</code> <code class="na">-a</code> <code class="na">-m</code> <code class="s">&quot;Add contents to about page&quot;</code>
</pre>


<p>After a few commits on this branch, our history looks like the
following.</p>

<figure>
    <img src="media/5-2.png"/>

    <figcaption>Adding the <code>about</code> branch</figcaption>

</figure>


<h2 id="another-emergency-update">Another Emergency Update!</h2>

<p><em>Our boss just gave us some more breaking news!</em> Again, we’ll
use a hotfix branch to update the site without affecting our about page
developments.  Make sure to base the updates on <code>master</code>, not the
<code>about</code> branch:</p>

<pre><code class="k">git</code> <code class="k">checkout</code> <code class="n">master</code>
<code class="k">git</code> <code class="k">branch</code> <code class="n">news-hotfix</code>
<code class="k">git</code> <code class="k">checkout</code> <code class="n">news-hotfix</code>
<code class="k">git</code> <code class="k">branch</code>
</pre>


<p>Change the “News” section in <code>index.html</code> to:</p>

<pre><code class="nt">&lt;h2</code> <code class="na">style=</code><code class="s">&quot;color: #C00&quot;</code><code class="nt">&gt;</code>News<code class="nt">&lt;/h2&gt;</code>
<code class="nt">&lt;ul&gt;</code>
  <code class="nt">&lt;li&gt;&lt;a</code> <code class="na">href=</code><code class="s">&quot;news-1.html&quot;</code><code class="nt">&gt;</code>Blue Is The New Hue<code class="nt">&lt;/a&gt;&lt;/li&gt;</code>
  <code class="nt">&lt;li&gt;&lt;a</code> <code class="na">href=</code><code class="s">&quot;rainbow.html&quot;</code><code class="nt">&gt;</code>Our New Rainbow<code class="nt">&lt;/a&gt;&lt;/li&gt;</code>
  <code class="nt">&lt;li&gt;&lt;a</code> <code class="na">href=</code><code class="s">&quot;news-2.html&quot;</code><code class="nt">&gt;</code>A Red Rebellion<code class="nt">&lt;/a&gt;&lt;/li&gt;</code>
<code class="nt">&lt;/ul&gt;</code>
</pre>


<p>Commit a snapshot:</p>

<pre><code class="k">git</code> <code class="k">status</code>
<code class="k">git</code> <code class="k">commit</code> <code class="na">-a</code> <code class="na">-m</code> <code class="s">&quot;Add 2nd news item to index page&quot;</code>
</pre>


<p>Then, create a new page called <code>news-2.html</code>:</p>

<pre><code class="cp">&lt;!DOCTYPE html&gt;</code>
<code class="nt">&lt;html</code> <code class="na">lang=</code><code class="s">&quot;en&quot;</code><code class="nt">&gt;</code>
<code class="nt">&lt;head&gt;</code>
  <code class="nt">&lt;title&gt;</code>A Red Rebellion<code class="nt">&lt;/title&gt;</code>
  <code class="nt">&lt;link</code> <code class="na">rel=</code><code class="s">&quot;stylesheet&quot;</code> <code class="na">href=</code><code class="s">&quot;style.css&quot;</code> <code class="nt">/&gt;</code>
  <code class="nt">&lt;meta</code> <code class="na">charset=</code><code class="s">&quot;utf-8&quot;</code> <code class="nt">/&gt;</code>
<code class="nt">&lt;/head&gt;</code>
<code class="nt">&lt;body&gt;</code>
  <code class="nt">&lt;h1</code> <code class="na">style=</code><code class="s">&quot;color: #C03&quot;</code><code class="nt">&gt;</code>A Red Rebellion<code class="nt">&lt;/h1&gt;</code>
    
  <code class="nt">&lt;p&gt;</code>Earlier today, several American design firms
  announced that they have completely rejected the use
  of blue in any commercial ventures. They have
  opted instead for <code class="nt">&lt;span</code> <code class="na">style=</code><code class="s">&quot;color: #C03&quot;</code><code class="nt">&gt;</code>Red<code class="nt">&lt;/span&gt;</code>.<code class="nt">&lt;/p&gt;</code>
    
  <code class="nt">&lt;p&gt;&lt;a</code> <code class="na">href=</code><code class="s">&quot;index.html&quot;</code><code class="nt">&gt;</code>Return to home page<code class="nt">&lt;/a&gt;&lt;/p&gt;</code>
<code class="nt">&lt;/body&gt;</code>
<code class="nt">&lt;/html&gt;</code>
</pre>


<p>Stage and commit another snapshot:</p>

<pre><code class="k">git</code> <code class="k">add</code> <code class="n">news-2.html</code>
<code class="k">git</code> <code class="k">status</code>
<code class="k">git</code> <code class="k">commit</code> <code class="na">-m</code> <code class="s">&quot;Add article for 2nd news item&quot;</code>
</pre>



<h2 id="publish-news-hotfix">Publish News Hotfix</h2>

<p>We’re ready to merge the news update back into
<code>master</code>.</p>

<pre><code class="k">git</code> <code class="k">checkout</code> <code class="n">master</code>
<code class="k">git</code> <code class="k">merge</code> <code class="n">news-hotfix</code>
<code class="k">git</code> <code class="k">branch</code> <code class="na">-d</code> <code class="n">news-hotfix</code>
</pre>


<p>The <code>master</code> branch hasn’t been altered since we created
<code>news-hotfix</code>, so Git can perform a fast-forward merge. Our
repository now looks like the following.</p>

<figure>
    <img src="media/5-3.png"/>

    <figcaption>Fast-forwarding <code>master</code> to the
<code>news-hotfix</code></figcaption>

</figure>


<h2 id="rebase-the-about-branch">Rebase the About Branch</h2>

<p>This puts us in the exact same position as we were in before our first 3-way
merge. We want to pull changes from <code>master</code> into a feature branch,
only this time we’ll do it with a rebase instead of a merge.</p>

<pre><code class="k">git</code> <code class="k">checkout</code> <code class="n">about</code>
<code class="k">git</code> <code class="k">rebase</code> <code class="n">master</code>
<code class="k">git</code> <code class="k">log</code> <code class="na">--oneline</code>
</pre>


<p>Originally, the <code>about</code> branch was based on the <code>Merge
branch 'crazy-experiment'</code> commit. The rebase took the entire
<code>about</code> branch and plopped it onto the <em>tip</em> of the
<code>master</code> branch, which is visualized in the following diagram. Also
notice that, like the <code>git merge</code> command, <code>git rebase</code>
requires you to be on the branch that you want to move.</p>

<figure>
    <img src="media/5-4.png"/>

    <figcaption>Rebasing the <code>about</code> branch onto
<code>master</code></figcaption>

</figure>

<p>After the rebase, <code>about</code> is a linear extension of the
<code>master</code> branch, enabling us to do a fast-forward merge later on.
Rebasing also allowed us to integrate the most up-to-date version of
<code>master</code> <em>without a merge commit</em>.</p>


<h2 id="add-a-personal-bio">Add a Personal Bio</h2>

<p>With our news hotfix out of the way, we can now continue work on our about
section. Create the file <code>about/me.html</code> with the following
contents:</p>

<pre><code class="cp">&lt;!DOCTYPE html&gt;</code>
<code class="nt">&lt;html</code> <code class="na">lang=</code><code class="s">&quot;en&quot;</code><code class="nt">&gt;</code>
<code class="nt">&lt;head&gt;</code>
  <code class="nt">&lt;title&gt;</code>About Me<code class="nt">&lt;/title&gt;</code>
  <code class="nt">&lt;link</code> <code class="na">rel=</code><code class="s">&quot;stylesheet&quot;</code> <code class="na">href=</code><code class="s">&quot;../style.css&quot;</code> <code class="nt">/&gt;</code>
  <code class="nt">&lt;meta</code> <code class="na">charset=</code><code class="s">&quot;utf-8&quot;</code> <code class="nt">/&gt;</code>
<code class="nt">&lt;/head&gt;</code>
<code class="nt">&lt;body&gt;</code>
  <code class="nt">&lt;h1&gt;</code>About Me<code class="nt">&lt;/h1&gt;</code>
  <code class="nt">&lt;p&gt;</code>I&#39;m a big nerd.<code class="nt">&lt;/p&gt;</code>

  <code class="nt">&lt;h2&gt;</code>Interests<code class="nt">&lt;/h2&gt;</code>
  <code class="nt">&lt;ul&gt;</code>
    <code class="nt">&lt;li&gt;</code>Computers<code class="nt">&lt;/li&gt;</code>
    <code class="nt">&lt;li&gt;</code>Mathematics<code class="nt">&lt;/li&gt;</code>
    <code class="nt">&lt;li&gt;</code>Typography<code class="nt">&lt;/li&gt;</code>
  <code class="nt">&lt;/ul&gt;</code>

  <code class="nt">&lt;p&gt;&lt;a</code> <code class="na">href=</code><code class="s">&quot;index.html&quot;</code><code class="nt">&gt;</code>Return to about page<code class="nt">&lt;/a&gt;&lt;/p&gt;</code>
<code class="nt">&lt;/body&gt;</code>
<code class="nt">&lt;/html&gt;</code>
</pre>


<p>Then, commit the changes to the repository.</p>

<pre><code class="k">git</code> <code class="k">add</code> <code class="n">about/me.html</code>
<code class="k">git</code> <code class="k">commit</code> <code class="na">-m</code> <code class="s">&quot;Add HTML page for personal bio&quot;</code>
<code class="k">git</code> <code class="k">log</code> <code class="na">--oneline</code>
</pre>


<p>Remember that thanks to the rebase, <code>about</code> rests on top of
<code>master</code>. So, all of our about section commits are grouped together,
which would not be the case had we merged instead of rebased. This also
eliminates an unnecessary fork in our project history.</p>


<h2 id="add-dummy-page-for-mary">Add Dummy Page for Mary</h2>

<p>Once again, the next two snapshots are unnecessarily trivial. However,
we’ll use an <em>interactive</em> rebase to combine them into a single commit
later on. That’s right, <code>git rebase</code> not only lets you move
branches around, it enables you to manipulate individual commits as you do
so.</p>

<p>Create a new empty file in the about section:
<code>about/mary.html</code>.</p>

<pre><code class="k">git</code> <code class="k">add</code> <code class="n">about</code>
<code class="k">git</code> <code class="k">status</code>
<code class="k">git</code> <code class="k">commit</code> <code class="na">-m</code> <code class="s">&quot;Add empty HTML page for Mary&#39;s bio&quot;</code>
</pre>



<h2 id="link-to-the-about-section">Link to the About Section</h2>

<p>Then, add a link to the about page in <code>index.html</code> so that its
“Navigation” section looks like the following.</p>
    
<pre><code class="nt">&lt;h2&gt;</code>Navigation<code class="nt">&lt;/h2&gt;</code>
<code class="nt">&lt;ul&gt;</code>
  <code class="nt">&lt;li&gt;</code>
    <code class="nt">&lt;a</code> <code class="na">href=</code><code class="s">&quot;about/index.html&quot;</code><code class="nt">&gt;</code>About Us<code class="nt">&lt;/a&gt;</code>
  <code class="nt">&lt;/li&gt;</code>
  <code class="nt">&lt;li</code> <code class="na">style=</code><code class="s">&quot;color: #F90&quot;</code><code class="nt">&gt;</code>
    <code class="nt">&lt;a</code> <code class="na">href=</code><code class="s">&quot;orange.html&quot;</code><code class="nt">&gt;</code>The Orange Page<code class="nt">&lt;/a&gt;</code>
  <code class="nt">&lt;/li&gt;</code>
  <code class="nt">&lt;li</code> <code class="na">style=</code><code class="s">&quot;color: #00F&quot;</code><code class="nt">&gt;</code>
    <code class="nt">&lt;a</code> <code class="na">href=</code><code class="s">&quot;blue.html&quot;</code><code class="nt">&gt;</code>The Blue Page<code class="nt">&lt;/a&gt;</code>
  <code class="nt">&lt;/li&gt;</code>
  <code class="nt">&lt;li&gt;</code>
    <code class="nt">&lt;a</code> <code class="na">href=</code><code class="s">&quot;rainbow.html&quot;</code><code class="nt">&gt;</code>The Rainbow Page<code class="nt">&lt;/a&gt;</code>
  <code class="nt">&lt;/li&gt;</code>
<code class="nt">&lt;/ul&gt;</code>
</pre>


<p>Don’t forget to commit the change:</p>

<pre><code class="k">git</code> <code class="k">commit</code> <code class="na">-a</code> <code class="na">-m</code> <code class="s">&quot;Add link to about section in home page&quot;</code>
</pre>



<h2 id="clean-up-the-commit-history">Clean Up the Commit History</h2>

<p>Before we merge into the <code>master</code> branch, we should make sure we
have a clean, meaningful history in our feature branch. By rebasing
interactively, we can choose <em>how</em> each commit is transferred to the new
base. Specify an interactive rebase by passing the <code>-i</code> flag to the
rebase command:</p>

<pre><code class="k">git</code> <code class="k">rebase</code> <code class="na">-i</code> <code class="n">master</code>
</pre>


<p>This should open up a text editor populated with all of the commits
introduced in the <code>about</code> branch, listed from oldest to newest. The
listing defines exactly how Git will transfer the commits to the new base.
Leaving it as is will do a normal <code>git rebase</code>, but if we move the
lines around, we can change the order in which commits are applied.</p>

<p>In addition, we can replace the <code>pick</code> command before each line
to edit it or combine it with other commits. All of the available commands are
shown in the comment section of the rebase listing, but right now, we only need
the <code>squash</code> command. This will condense our unnecessarily small
commits into a single, meaningful snapshot. Change your listing to match the
following:</p>

<pre><code class="k">pick</code> <code class="s">5cf316e</code> Add empty page in about section
<code class="k">squash</code> <code class="s">964e013</code> Add contents to about page
<code class="k">pick</code> <code class="s">89db9ab</code> Add HTML page for personal bio
<code class="k">squash</code> <code class="s">2bda8e5</code> Add empty HTML page for Mary&#39;s bio
<code class="k">pick</code> <code class="s">915466f</code> Add link to about section in home page
</pre>


<p>Then, begin the rebase by saving and closing the editor. The following list
describes the rebasing process in-depth and tells you what you need to change
along the way.</p>

<ol>

    <li>Git moves the <code>5cf316e</code> commit to the tip of
    <code>master</code>.</li>

    <li>Git combines the snapshots of <code>964e013</code> and
    <code>5cf316e</code>.</li>

    <li>Git stops to ask you what commit message to use for the combined
    snapshot. It automatically includes the messages of both commits, but you
    can delete that and simplify it to just <code>Create the about page</code>.
    Save and exit the text editor to continue.</li>

    <li>Git repeats this process for commits <code>89db9ab</code> and
    <code>2bda8e5</code>. Use <code>Begin creating bio pages</code> for the
    message.</li>

    <li>Git adds the final commit (<code>915466f</code>) on top of the commits
    created in the previous steps.</li>

</ol>

<p>You can see the result of all this activity with <code>git log
--oneline</code>, as well as in the diagram below. The five commits originally
in <code>about</code> have been condensed to three, and two of them have new
messages. Also notice that they all have different commit ID’s. These new
ID’s tell us that we didn’t just <em>move</em> a couple of
commits—we’ve literally rewritten our repository history with brand
new commits.</p>

<figure>
    <img src="media/5-5.png"/>

    <figcaption>Results of the interactive rebase</figcaption>

</figure>

<p>Interactive rebasing gives you complete control over your project history,
but this can also be very dangerous. For example, if you were to delete a line
from the rebase listing, the associated commit wouldn’t be transferred to
the new base, and its content would be lost forever. In a future module,
we’ll also see how rewriting history can get you in trouble with public
Git repositories.</p>


<h2 id="stop-to-amend-a-commit">Stop to Amend a Commit</h2>

<p>The previous rebase only stopped us to edit the <em>messages</em> of each
commit. We can take this one step further and alter a <em>snapshot</em> during
the rebase. Start by running another interactive rebasing session. Note that
we’ve still been using <code>master</code> as the new base because it
selects the desired commits from the <code>about</code> branch.</p>

<pre><code class="k">git</code> <code class="k">rebase</code> <code class="na">-i</code> <code class="n">master</code>
</pre>


<p>Specify the <code>edit</code> command for the second commit, as shown
below.</p>

<pre><code class="k">pick</code> <code class="s">58dec2a</code> Create the about page
<code class="k">edit</code> <code class="s">6ac8a9f</code> Begin creating bio pages
<code class="k">pick</code> <code class="s">51c958c</code> Add link to about section in home page
</pre>


<p>When Git starts to move the second commit to the new base, it will stop to
do some “amending.” This gives you the opportunity to alter the
staged snapshot before committing it.</p>

<figure>
    <img src="media/5-6.png"/>

    <figcaption>Stopping to amend a commit</figcaption>

</figure>

<p>We’ll leave a helpful note for Mary, whom we’ll meet in the <a href="remotes.xhtml">Remotes</a> module. Open up <code>about/mary.html</code>
and add the following.</p>

<pre>[Mary, please update your bio!]
</pre>


<p>We’re currently between commits in a rebase, but we can alter the
staged snapshot in the exact same way as we have been throughout this entire
tutorial:</p>

<pre><code class="k">git</code> <code class="k">add</code> <code class="n">about/mary.html</code>
<code class="k">git</code> <code class="k">status</code>
<code class="k">git</code> <code class="k">commit</code> <code class="na">--amend</code>
</pre>


<p>You can use the default message created by <code>git commit</code>. The new
<code>‑‑amend</code> flag tells Git to <em>replace</em> the existing commit
with the staged snapshot instead of creating a new one. This is also very
useful for fixing premature commits that often occur during normal
development.</p>


<h2 id="continue-the-interactive-rebase">Continue the Interactive Rebase</h2>

<p>Remember that we’re in the middle of a rebase, and Git still has one
more commit that it needs to re-apply. Tell Git that we’re ready to move
on with the <code>--continue</code> flag:</p>

<pre><code class="k">git</code> <code class="k">rebase</code> <code class="na">--continue</code>
<code class="k">git</code> <code class="k">log</code> <code class="na">--oneline</code>
</pre>


<p>Note that our history still appears to be the same (because we used the
default commit message above), but the <code>Begin creating bio pages</code>
commit contains different content than it did before the rebase, along with a
new ID.</p>

<p>If you ever find yourself lost in the middle of a rebase and you’re
afraid to continue, you can use the <code>‑‑abort</code> flag to
abandon it and start over from scratch.</p>


<h2 id="publish-the-about-section">Publish the About Section</h2>

<p>The point of all this interactive rebasing is to generate a
<em>meaningful</em> history that we can merge back into <code>master</code>.
And, since we’ve rebased <code>about</code> onto the tip of
<code>master</code>, Git will be able to perform a fast-forward merge instead
of using a merge commit to join the two branches.</p>

<pre><code class="k">git</code> <code class="k">checkout</code> <code class="n">master</code>
<code class="k">git</code> <code class="k">log</code> <code class="na">--oneline</code>
<code class="k">git</code> <code class="k">merge</code> <code class="n">about</code>
<code class="k">git</code> <code class="k">log</code> <code class="na">--oneline</code>
</pre>


<p>Don’t forget to delete the obsolete <code>about</code> branch.</p>

<pre><code class="k">git</code> <code class="k">branch</code> <code class="na">-d</code> <code class="n">about</code>
</pre>


<p>Our final history is shown in the figure below. As you can see, a linear
history is much easier to comprehend than the back-and-forth merging of the
previous module. But on the other hand, we don’t have the slightest
notion of <em>how</em> we got to our current state.</p>

<figure>
    <img src="media/5-7.png"/>

    <figcaption>Merging and deleting the <code>about</code> branch</figcaption>

</figure>


<h2 id="conclusion">Conclusion</h2>

<p>Rebasing enables fast-forward merges by moving a branch to the tip of
another branch. It effectively eliminates the need for merge commits, resulting
in a completely linear history. To an outside observer, it will seem as though
you created every part of your project in a neatly planned sequence, even
though you may have explored various alternatives or developed unrelated
features in parallel. Rebasing gives you the power to choose exactly what gets
stored in your repositories.</p>

<p>This can actually be a bit of a controversial topic within the Git
community. Some believe that the benefits discussed in this module
aren’t worth the hassle of rewriting history. They take a more
“pure” approach to Git by saying that your history should reflect
<em>exactly</em> what you’ve done, ensuring that no information is ever
lost. Furthermore, an advanced configuration of <code>git log</code> can
display a linear history from a highly-branched repository.</p>

<p>But, others contend that merge commits should be <em>meaningful</em>.
Instead of merging at arbitrary points just to access updates, they claim that
merge commits should represent a symbolic joining of two branches. In
particular, large software projects (such as the Linux kernel) typically
advocate interactive rebasing to keep the repository as clean and
straightforward as possible.</p>

<p>The use of <code>git rebase</code> is entirely up to you. Customizing the
evolution of your project can be very beneficial, but it might not be worth the
trouble when you can accomplish close to the same functionality using merges
exclusively. As a related note, you can use the following command to force a
merge commit when Git would normally do a fast-forward merge.</p>
    
<pre><code class="k">git</code> <code class="k">merge</code> <code class="na">--no-ff</code> <code class="n">&lt;branch-name&gt;</code>
</pre>


<p>The next module will get a little bit more involved in our project history.
We’ll try fixing mistakes via complex rebases and even learn how to
recover deleted commits.</p>


<h2 id="quick-reference">Quick Reference</h2>

<dl>
    <dt><code>git rebase &lt;new-base&gt;</code></dt>

    <dd>Move the current branch’s commits to the tip of
    <code>&lt;new-base&gt;</code>, which can be either a branch name or a
    commit ID.</dd>

    <dt><code>git rebase -i &lt;new-base&gt;</code></dt>
    <dd>Perform an interactive rebase and select actions for each commit.</dd>

    <dt><code>git commit --amend</code></dt>
    <dd>Add staged changes to the most recent commit instead of creating a new
    one.</dd>

    <dt><code>git rebase --continue</code></dt>
    <dd>Continue a rebase after amending a commit.</dd>

    <dt><code>git rebase --abort</code></dt>
    <dd>Abandon the current interactive rebase and return the repository to
    its former state.</dd>

    <dt><code>git merge --no-ff &lt;branch-name&gt;</code></dt>
    <dd>Force a merge commit even if Git could do a fast-forward merge.</dd>
</dl>

</div>
    </div>
  </body>
</html>
